
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%
  qc_file_base = params[:qc_file]
  subject_ids  = @userfile.subject_ids
  sids_hash    = subject_ids.index_by { |sid| sid }

  if qc_file_base == "base"
    # Annoyingly, the main QC file has an arbitrary name inside the QC directory, distinct from the the SIDs.
    qc_file_base = @userfile
                   .list_files("QC", :file)
                   .map { |entry| Pathname.new(entry.name).basename.to_s }
                   .select { |name| name.sub!(/\.html$/,"") }   # sub! returns nil if it can't sub
                   .reject { |name| sids_hash[name] }
                   .first
    qc_file_base ||= ""
    qc_file_base &&= "#{qc_file_base}.html"
  end
  qc_file = @userfile.name + "/QC/" + qc_file_base # strings
%>

<h1>CivetStudy QC report: <%= qc_file %></h1>

<% if File.file?(@userfile.cache_full_path.parent + qc_file) %>

  <div id="fragment-wrapper"></div>

  <script>
    (function() {
      var fragment = $(<%= html_for_js(File.read(@userfile.cache_full_path.parent + qc_file)).gsub(/src=/i,"xsrc=").html_safe %>);
      var base_link_url  = "/userfiles/" + "<%= @userfile.id %>" + "/display?apply_layout=true&viewer=qc_file&qc_file=";
      var base_image_url = "/userfiles/" + "<%= @userfile.id %>" + "/content?content_loader=collection_file&arguments=";
        <%
           files_in_base = @userfile
                           .list_files.map(&:name)
           files_in_subjects = Dir.chdir(@userfile.cache_full_path.parent) do
             @userfile.subject_ids.map do |sid|
               sid_path = Pathname(@userfile.name) + sid
               if File.symlink?(sid_path.to_s) # support for Virtual Studies
                 Dir.glob(sid_path + "**/*")
               else
                 []
               end
             end
           end.flatten
        %>
      var file_list = [
        <%=
           # Creates the JS array of strings
           (files_in_base + files_in_subjects)
             .select { |name| name =~ /\.(png|jpg|jpeg|gif)$/i }
             .map { |name| "\"#{name}\"" }
             .join(",\n")
             .html_safe
        %>
      ];

      var base_image_url_by_dsid = {
        <% external_civouts = @userfile.get_civet_outputs rescue [] %>
        <% external_civouts.each do |civ| %>
        <%   dsid = civ.dsid %>
        "<%= dsid %>": "/userfiles/" + "<%= civ.id %>" + "/content?content_loader=collection_file&arguments=" + "<%= civ.name %>",
        <% end %>
        "_default_":  base_image_url
      };

      fragment.find("a").each(function() {
        this.href = base_link_url + $(this).attr("href");
      });

      // This code should be improved to parse the image path
      // relative to the path of qc_file itself!
      fragment.find("img").each(function() {
        var image      = this;
        var image_src  = $(image).attr("xsrc"); // usually a relative path
        image_src      = image_src.replace(/^[\/\.]+/,"");  // remove leading ../../../
        var dsid       = image_src.replace(/\/.*/ , "");    // remove everything but first dir component
        var image_regex = new RegExp(image_src + "$")
        var local_image_url = base_image_url
        var image_name = file_list.find(function(f) {
          return f.match(image_regex)
        });
        if (image_name) {
          local_image_url = base_image_url_by_dsid[dsid]
          if (local_image_url) {
            image_name = image_name.replace(/^[^/]+\/[^/]+/,"")  // remove first two component
          } else {
            local_image_url = base_image_url
          }
          image.src = local_image_url + image_name;
        } else {
          // don't know what to do, really
          image.src = ""
        }
      });

      $("#fragment-wrapper").append(fragment);
    })();
  </script>
<% else %>
  Error: the QC report seems to be missing in this study. Maybe the QC task did
  not complete successfully.
<% end %>


